MAIN USE CASE
	Init: 	Broadcast that I am alive, awaiting handshake (UDP)
			Receive something from the rest of the computers
			Send some confirmation back (3-way)
			Store in some struct

	Order:	Send out the new list
			Receive the new list as confirmation from the other elevators. Merge if nescessary.
			If Merge, repeat untill merging is not nescessary.
			If new:
				Merge by union
			If complete:
				Merge by and (unless the list differ by a larger amount than 1)

	Recv:	Merge order with your list (union)
			Send your new list to sender

Functions:
sendupdate(struct floor_order_list, TYPE union/intersection) (Split?)
recvupdate(struct floor_order_list, TYPE union/intersection, ID elev_id)
sendconfirmation(struct floor_order_list)
recvconfirmation(struct floor_order_list, ID elev_id)
getlist() (Send if list is empty, or at init)

sendupdate->recvconfirmation (ID 1)
recvupdate->sendconfirmation (ID 2, 3, 4, 5)
